//不能创建临时变量（第三个变量），实现两个数的交换
//1.用加减的方式，但是有一个很大的缺点--可能会出现溢出
#include <stdio.h>
int main()
{
	int a = 10;
	int b = 20;
	printf("a = %d\nb = %d\n", a, b);
	a = a + b;
	b = a - b;
	a = a - b;
	printf("a = %d\nb = %d\n", a, b);
	return 0;
}
//2.用异或的方式--运行效率低
#include <stdio.h>
int main()
{
	int a = 10;
	int b = 20;
	a = a ^ b;
	b = a ^ b;
	a = a ^ b;
	printf("a = %d b = %d\n", a, b);
	return 0;
}

//求一个整数储存在内存中的二进制(补码)中的1的个数
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{
	int num = 0;
	int count = 0;
	scanf("%d", &num);//-1
	/*while (num)
	{
		if (num % 2 == 1)
		{
			count++;
		}
		num = num / 2;
	}*///err(有局限，eg: -1)

	//32bit依次向右移动与（&）1
	//num&1==1
	int i = 0;
	for (i = 0; i < 32; i++)
	{
		if ((num >> i) & 1 == 1)
			count++;
	}
	
	
	printf("%d\n", count);
	return 0;
}


//如果a为真，打印呵呵
#include <stdio.h>
int main()
{
	int a = 1;
	if (a)
	{
		printf("呵呵\n");
	}
	return 0;
}
//如果a为j假，打印呵呵
#include <stdio.h>
int main()
{
	int a = 1;
	if (!a)
	{
		printf("呵呵\n");
	}
	return 0;
}

#include <stdio.h>
int main()
{
	int arr[10] = { 0 };
	printf("%d\n", sizeof(arr));
	printf("%d\n", sizeof arr);
	printf("%d\n", sizeof(int [10]));
}

#include <stdio.h>
int main()
{
	short s = 0;
	int a = 10;
	printf("%d\n", sizeof(s = a + 5));//2
	//a + 5放在sizeof()中是不会进行运算的
	printf("%d\n", s);//0
	return 0;
}

#include <stdio.h>
int main()
{
	int a = 0;
	//~按（2进制）位取反
	//00000000000000000000000000000000
	//11111111111111111111111111111111 - 补码(按位取反的结果)（补码-1，取反得到原码）
	//11111111111111111111111111111110 - 反码（-1）
	//10000000000000000000000000000001 - 原码（但打印出来的是原码）（原码+1，取反得补码）
	//-1
	printf("%d\n", ~a);
	return 0;
}

#include <stdio.h>
int main()
{
	//把00000000000000000000000000001011变成00000000000000000000000000001111
	//00000000000000000000000000001011
	//00000000000000000000000000000100 (1 << 2)
	int a = 11;
	a = a | (1 << 2);
	printf("%d\n", a);
	return 0;
}

#include <stdio.h>
int main()
{
	//把  00000000000000000000000000001111
	//变成00000000000000000000000000001011
	
	//00000000000000000000000000001111
	//11111111111111111111111111111011
	//00000000000000000000000000000100 (取反后)
	//00000000000000000000000000001011
	int a = 15;
	a = a & (~(1 << 2));
	printf("%d\n", a);
	return 0;
}
