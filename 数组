//数组
#include <stdio.h>
#include <string.h>
int main()
{
	//创建一个数组-存放整型-10个
	int arr[10] = { 1, 2, 3 };//不完全初始化，剩下的元素默认初始化为0
	char arr2[] = "abcdef";
	printf("%d\n", sizeof(arr2)); //7
	//sizeof 计算arr2所占空间的大小，7个元素（从a到\0）-char 7*1 = 7
	printf("%d\n", strlen(arr2));//6
	//strlen 求字符串的长度-'\0'之前的字符个数
	return 0;
}
//1. strlen 与sizeof没有什么关联
//2. strlen 是求字符串长度的-只能针对字符串求长度-库函数-使用得引用头文件
//3. sizeof 计算变量、数组、类型的大小-单位是字节-操作符

#include <stdio.h>
#include <string.h>
int main()
{
	char arr1[] = "abc";
	char arr2[] = { 'a', 'b', 'c' };
	printf("%d\n", sizeof(arr1));//4
	printf("%d\n", sizeof(arr2));//3
	printf("%d\n", strlen(arr1));//3
	printf("%d\n", strlen(arr2));//随机数
	return 0;
}

#include <stdio.h>
#include <string.h>
int main()
{
	char arr[] = "abcdef";//[a] [b] [c] [d] [e] [f] [\0]
	int i = 0;
	int len = strlen(arr);
	for (i = 0; i < len; i++)
	{
		printf("%c ", arr[i]);
	}
	return 0;
}

#include <stdio.h>
#include <string.h>
int main()
{
	char arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
	int i = 0;
	int sz = sizeof(arr)/sizeof(arr[0]);
	for (i = 0; i < sz; i++)
	{
		printf("%c ", arr[i]);
	}
	return 0;
}

#include <stdio.h>
int main()
{
	int arr[3][4] = { {1, 2, 3}, {4, 5} };
	//1 2 3 0
	//4 5 0 0
	//0 0 0 0
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		int j = 0;
		for (j = 0; j < 4; j++)
		{
			printf("%d ", arr[i][j]);
		}
		printf("\n");
		
	}return 0;
}

//对arr进行排序，排成升序
#include <stdio.h>
void bubble_sort(int arr[], int sz)
{
	//确定冒泡排序的趟数
	int i = 0;
	for (i = 1; i <= sz - 1; i++)
	{
		//每一次冒泡排序
		int flag = 1;//假设这趟要排序的数已经有序（减少不必要的重复循环）
		int j = 0;
		for (j = 0; j <= sz - 1 - i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = 0;
				tmp = arr[j + 1];
				arr[j + 1] = arr[j];
				arr[j] = tmp;
				flag = 0;//本趟循环其实不完全有序
			}
		}
		if (flag == 1)
		{
			break;
		}
	}
}
int main()
{
	int i = 0;
	int arr[] = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz);
	for (i = 0; i <= sz - 1; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

#include <stdio.h>
int main()
{
	int arr[] = { 1, 2, 3, 4, 5 };
	printf("%p\n", arr);
	printf("%p\n", &arr[0]);
	printf("%d\n", *arr);//1
	return 0;
}
